version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: microservices_db
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      - microservices-network

  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/microservices_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=inventory-service
      - OTEL_TRACES_SAMPLER=always_on
    ports:
      - "8082:8080"
    volumes:
      - ./opentelemetry-javaagent.jar:/app/opentelemetry-javaagent.jar
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - microservices-network
    command: ["java", "-javaagent:/app/opentelemetry-javaagent.jar", "-jar", "/app/app.jar"]

  payment-service:
    build: ./payment-service
    container_name: payment-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/microservices_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - INVENTORY_SERVICE_URL=http://inventory-service:8080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=payment-service
      - OTEL_TRACES_SAMPLER=always_on
    ports:
      - "8081:8080"
    volumes:
      - ./opentelemetry-javaagent.jar:/app/opentelemetry-javaagent.jar
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
      inventory-service:
        condition: service_started
    networks:
      - microservices-network
    command: ["java", "-javaagent:/app/opentelemetry-javaagent.jar", "-jar", "/app/app.jar"]

  order-service:
    build: ./order-service
    container_name: order-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/microservices_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - PAYMENT_SERVICE_URL=http://payment-service:8080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=order-service
      - OTEL_TRACES_SAMPLER=always_on
    ports:
      - "8080:8080"
    volumes:
      - ./opentelemetry-javaagent.jar:/app/opentelemetry-javaagent.jar
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
      payment-service:
        condition: service_started
    networks:
      - microservices-network
    command: ["java", "-javaagent:/app/opentelemetry-javaagent.jar", "-jar", "/app/app.jar"]

volumes:
  mysql_data:

networks:
  microservices-network:
    driver: bridge
